name: Test

on:
  push:
    branches: [test/sign-windows-installer]

env:
  CARGO_TERM_COLOR: always
  APP_NAME: 'momento-cli'
  MAINTAINER: 'momentohq'
  DESC: 'Official CLI for Momento Serverless Cache'

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.release }}
    steps:
      - name: Output release
        id: release
        run: echo "::set-output name=release::1.2.3"

  publish-windows-assets:
    runs-on: windows-latest
    needs: [release]
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: i guess windows-latest does not have protoc or cmake but we need protoc
        run: choco install protoc
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          override: true

      - name: Show Cargo Version
        run: |
          cat Cargo.toml
        shell: bash

      - name: Build
        id: build
        env:
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          rustup target add x86_64-pc-windows-gnu
          cargo build --release --target x86_64-pc-windows-gnu

          echo "::set-output name=momento_binary_path::.\target\x86_64-pc-windows-gnu\release\momento.exe"
          $distributableFile64Prefix = "momento-cli-$env:VERSION.windows_x86_64"
          echo "::set-output name=distributable_file_prefix::$distributableFile64Prefix"

      - name: Write PFX certificate file
        id: write_pfx
        env:
          PFX_CONTENT: ${{ secrets.CODE_SIGNING_CERT_BASE64 }}
        run: |
          $pfxPath = "cert.pfx";
          $encodedBytes = [System.Convert]::FromBase64String($env:PFX_CONTENT);
          Set-Content $pfxPath -Value $encodedBytes -AsByteStream;
          echo "::set-output name=pfx_path::$pfxPath";

      - name: Test and cache signtool path
        id: signtool
        run: |
          $signtool = "C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe"
          Test-Path -Path $signtool -PathType Leaf
          echo "::set-output name=signtool_path::$signtool"

      - name: Sign Momento binary
        env:
          SIGNTOOL_PATH: ${{ steps.signtool.outputs.signtool_path }}
          CERT_PATH: ${{ steps.write_pfx.outputs.pfx_path }}
          CERT_PASSWORD: ${{ secrets.CODE_SIGNING_CERT_PASSWORD }}
          MOMENTO_BINARY_PATH: ${{ steps.build.outputs.momento_binary_path }}
        run: |
          & $env:SIGNTOOL_PATH sign /fd SHA256 /a /f $env:CERT_PATH /p $env:CERT_PASSWORD /tr http://timestamp.digicert.com /td SHA256 $env:MOMENTO_BINARY_PATH

      - name: Create zip
        id: create_zip
        env:
          MOMENTO_BINARY_PATH: ${{ steps.build.outputs.momento_binary_path }}
          DISTRIBUTABLE_FILE_PREFIX: ${{ steps.build.outputs.distributable_file_prefix }}
        run: |
          $zipFilename = "$env:DISTRIBUTABLE_FILE_PREFIX.zip"
          $zipPath = ".\$zipFilename"
          Compress-Archive -LiteralPath $env:MOMENTO_BINARY_PATH -DestinationPath $zipPath

          echo "::set-output name=asset_path::$zipPath"
          echo "::set-output name=asset_name::$zipFilename"

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Build installer
        id: build_installer
        env:
          MOMENTO_BINARY_PATH: ${{ steps.build.outputs.momento_binary_path }}
          DISTRIBUTABLE_FILE_PREFIX: ${{ steps.build.outputs.distributable_file_prefix }}
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          cp $env:MOMENTO_BINARY_PATH .\windows\installer
          # NB: MSI installers are Major.minor.patch.build. Since we don't have build versions, we set that to 0.
          # Also note the build expects this to be an environment variable
          $env:BuildVersion = "$env:VERSION.0"
          msbuild .\windows\installer\MomentoCLI.wixproj /p:Configuration=Release /p:OutputName=$env:DISTRIBUTABLE_FILE_PREFIX

          $msiFilename = "$env:DISTRIBUTABLE_FILE_PREFIX.msi"
          $msiPath = ".\windows\installer\bin\Release\$msiFilename"
          echo "::set-output name=asset_path::$msiPath"
          echo "::set-output name=asset_name::$msiFilename"
          
      - name: Sign installer
        env:
          SIGNTOOL_PATH: ${{ steps.signtool.outputs.signtool_path }}
          CERT_PATH: ${{ steps.write_pfx.outputs.pfx_path }}
          CERT_PASSWORD: ${{ secrets.CODE_SIGNING_CERT_PASSWORD }}
          MSI_PATH: ${{ steps.build_installer.outputs.asset_path }}
        run: |
          & $env:SIGNTOOL_PATH sign /fd SHA256 /a /f $env:CERT_PATH /p $env:CERT_PASSWORD /tr http://timestamp.digicert.com /td SHA256 $env:MSI_PATH

      - name: Delete PFX certificate
        env:
          CERT_PATH: ${{ steps.write_pfx.outputs.pfx_path }}
        run: Remove-Item -Path $env:CERT_PATH

      - name: Create zip and installer urls
        id: create_release_urls
        env:
          VERSION: ${{ needs.release.outputs.version }}
          ZIP_FILENAME: ${{ steps.create_zip.outputs.asset_name }}
          MSI_FILENAME: ${{ steps.build_installer.outputs.asset_name }}
        run: |
          $latestReleaseUri = "https://api.github.com/repos/momentohq/momento-cli/releases/tags/v$env:VERSION"
          $latestRelease = (Invoke-WebRequest -Uri $latestReleaseUri -Method Get -Headers @{'authorization' = 'Bearer ${{ secrets.GITHUB_TOKEN }}' } | Select-Object -Property Content).Content
          $releaseId = $latestRelease | jq -r .id
          $ghAssetMsi = "https://uploads.github.com/repos/momentohq/momento-cli/releases/$releaseId/assets?name=$env:MSI_FILENAME"
          $ghAssetZip = "https://uploads.github.com/repos/momentohq/momento-cli/releases/$releaseId/assets?name=$env:ZIP_FILENAME"
          echo "::set-output name=upload_url_msi::$ghAssetMsi"
          echo "::set-output name=upload_url_zip::$ghAssetZip"

